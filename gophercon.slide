Гоферкон from Раша
Go: плюсы и минусы на фоне языка Pony

Елеськин Григорий
Senior Developer, Mobalytics
nyarumilian@gmail.com
https://github.com/Nyarum

* Что такое Go?

Компилируемый язык со сборщиком мусора, в императивном стиле с целью покрытия многопоточных и распределенных систем

> Его преимущества

- Гоурутины с каналами
- Быстрая компиляция
- Большая экосистема
- Простота разработки

* Что такое Pony?

Компилируемый ООП язык основанный на модели акторов с той же целью, что и Go, но с безопасным подходом ко всему

> Его преимущества

- Прозрачная и быстрая многопоточность
- То, что скомпилировалось - никогда не упадет
- Простота разработки
- Дженерики :)

* Подробнее о Pony

- Безопасная работа с типами
- Безопасная работа с памятью
- Скажем нет исключениям
- Data-race и Dead-lock free

* Как выглядит простейшая программа на Pony?

Давайте попробуем посмотреть глубже на простейшую инициализацию

.image hello_part1.png 475 _

* Продолжение

.image hello_part2.png 550 _

* Вывод

.code hello_output.txt

* Как реализованы акторы в Pony?

Чтобы объект в Pony был актором и мог исполняться на множестве ядер (Заметьте, один актор в одно время исполняется только в одном из потоков, что гарантирует постоянное состояние на момент исполнения)

.image actor_part1.png 450 _

* Продолжение

.image actor_part2.png 550 _

* Вывод

.code actor_output.txt

* Что дает система типов в Pony?

В Pony есть всем известные стандартные типы, которые свойственны всем ООП языкам, но так же он имеет так называемые Reference capabilities

- iso
- val
- ref
- box
- trn
- tag

* Вещи в кратком обзоре

Pony так же имеет

- Трейты (Как в Rust) / Интерфейсы (Как в Go)
- Алиасы типов
- Примитивы
- Деструктивное чтение
- Паттерн матчинг
- Алгебраические типы данных (Юнионы, перечисления, сопоставление)

Это не все, но это важная составляющая, которая позволяет не ограничиваться одним подходом к реализации

* Давайте заглянем под капот

- У Go есть шедулер
- У Pony есть шедулер
- Так в чем же отличие?

.image joke.jpg _ 600

* Как они могут быть симбиозом?

- Представим, что вы устали от очередной паники на продакшене по вине одной случайно забытой проверки на `nil`

Варианты:
- Берем библиотеку для GRPC на C, подключаем ее к Pony через FFI
- Пишем свой вариант *RPC на Pony, который может общаться с Go
- Пишем bi-directional варианты shared library

* Зачем нам это нужно?

Pony находится в альфа состоянии своего развития

Из этого исходят такие пункты, как:
- Малое сообщество = малое количество библиотек / их отсутствие
- Возможность писать безопасный конкурентный код, думая лишь о логике, а не безопаности передачи данных между потоками
- Быстрая дистрибуция данных (За счет отсутствия любого вида локов, у нас нет оверхеда на быстрый счет данных используя передачу между акторами)

* Банальное сравнение скорости передачи сообщений

- Результаты (Macbook Pro 2016 Jule) - [Go: ~2500ms, Pony: ~1150ms], 2x разница

.image code23.png _ 1100

* Конец

- Тут должны быть какие-то результаты плюсов и минусов, но я оставлю раздумия на вас

- ponylang.org (Сайт)
- ponyc.slack.com (Slack сообщество)

.image logo.jpg _ 500

Give me more peace in the world :)
